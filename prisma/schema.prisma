generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  PROFESSIONAL
  ADMIN
}

enum PersonClassification {
  PERSON
  COMPANY
}

enum ProfessionalStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner               Owner?                      @relation("UserOwner")
  professional        Professional?               @relation("UserProfessional")
  admin               Admin?                      @relation("UserAdmin")
  actionLogs          ActionLog[]
  chatHistory         ChatHistory[]
  statusHistory       ProfessionalStatusHistory[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  isMain    Boolean  @default(false) @map("is_main")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation("UserAdmin", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  adminPermissions AdminPermission[]

  @@map("admins")
}

model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  uf           String
  city         String
  street       String
  number       String
  neighborhood String
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      Company?
  professional Professional?

  @@map("addresses")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  tradeName String   @map("trade_name")
  cnpj      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String  @unique @map("address_id")

  cnae   Cnae   @relation(fields: [cnaeId], references: [id])
  cnaeId String

  owner Owner? @relation

  documents     Document[]
  documentTypes DocumentType[]
  professionals ProfessionalCompany[]
  actionLogs    ActionLog[]

  @@map("companies")
}

model Owner {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String   @unique @map("company_id")

  user   User   @relation("UserOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("owners")
}

model Professional {
  id             String               @id @default(uuid())
  name           String
  cpf            String               @unique
  birthDate      DateTime             @map("birth_date")
  phone          String
  classification PersonClassification @default(PERSON)
  cnpj           String?              @unique
  registry       String
  registryUf     String               @map("registry_uf")
  status         ProfessionalStatus   @default(PENDING)
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String  @unique @map("address_id")

  registryType   RegistryType @relation(fields: [registryTypeId], references: [id])
  registryTypeId String       @map("registry_type_id")

  cnae   Cnae?   @relation(fields: [cnaeId], references: [id])
  cnaeId String? @map("cnae_id")

  branchActivity   BranchActivity @relation(fields: [branchActivityId], references: [id])
  branchActivityId String         @map("branch_activity_id")

  user   User   @relation("UserProfessional", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  companies     ProfessionalCompany[]
  statusHistory ProfessionalStatusHistory[]
  services      ProfessionalService[]

  @@map("professionals")
}

model ProfessionalStatusHistory {
  id        String             @id @default(uuid())
  status    ProfessionalStatus
  reason    String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt @map("updated_at")

  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String

  changedBy   User?   @relation(fields: [changedById], references: [id])
  changedById String?
}

model Permission {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  adminPermissions AdminPermission[]
}

model AdminPermission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  admin   Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId String

  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([adminId, permissionId])
}

model DocumentType {
  id             String   @id @default(uuid())
  name           String
  validityPeriod Int      @map("validity_period")
  prompt         String
  isActive       Boolean  @default(true) @map("is_active")
  metadata       Json
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  documents  Document[]
  actionLogs ActionLog[]

  @@unique([name, companyId])
  @@map("document_types")
}

model Document {
  id        String   @id @default(uuid())
  name      String
  duedate   DateTime
  url       String
  version   Int
  isLatest  Boolean  @default(false) @map("is_latest")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  documentType   DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  documentTypeId String       @map("document_type_id")

  indexation           Indexation?
  actionLog            ActionLog[]
  documentNotification DocumentNotification?

  @@unique([documentTypeId, version])
  @@map("documents")
}

model Indexation {
  id        String   @id @default(uuid())
  values    Json     @map("metadata_values")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String   @unique @map("document_id")

  @@map("indexations")
}

model ProfessionalCompany {
  id          String   @id @default(uuid())
  permissions Json // Ex.: { "document.create": true, "document-type.delete": false }
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String       @map("professional_id")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  @@unique([professionalId, companyId])
  @@map("professional_companies")
}

model ActionLog {
  id        String   @id @default(uuid())
  action    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?  @map("company_id")

  documentType   DocumentType? @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  documentTypeId String?       @map("company_type_id")

  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String?   @map("document_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  cnae   Cnae?   @relation(fields: [cnaeId], references: [id])
  cnaeId String?

  registryType   RegistryType? @relation(fields: [registryTypeId], references: [id])
  registryTypeId String?

  branchActivity   BranchActivity? @relation(fields: [branchActivityId], references: [id])
  branchActivityId String?

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?

  @@map("action_logs")
}

model DocumentNotification {
  id          String   @id @default(uuid())
  scheduledAt DateTime @map("scheduled_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String   @unique @map("document_id")

  @@map("document_notifications")
}

model ChatHistory {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("chat_histories")
}

model RegistryType {
  id        String   @id @default(uuid())
  name      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  actionLogs    ActionLog[]
  professionals Professional[]

  @@map("registry_types")
}

model Cnae {
  id          String   @id @default(uuid())
  code        String   @unique
  description String
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  actionLogs    ActionLog[]
  professionals Professional[]
  companies     Company[]

  @@map("cnaes")
}

model BranchActivity {
  id        String   @id @default(uuid())
  name      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  actionLogs    ActionLog[]
  professionals Professional[]

  @@map("branches_activity")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("password_reset_tokens")
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  summary     String
  description String
  imageUrl    String   @map("image_url")
  active      Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  professionals ProfessionalService[]

  ActionLog ActionLog[]

  @@map("services")
}

model ProfessionalService {
  id String @id @default(uuid())

  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String       @map("professional_id")

  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @map("service_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([professionalId, serviceId])
  @@map("professional_services")
}
