generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MEMBER
}

enum PermissionType {
  DOCUMENT_CREATE
  DOCUMENT_UPDATE
  DOCUMENT_DELETE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  uf           String
  city         String
  street       String
  number       String
  neighborhood String
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      Company?
  professional Professional?

  @@map("addresses")
}

model Owner {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  phone     String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company Company?

  @@map("owners")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  tradeName String   @map("trade_name")
  cnpj      String   @unique
  cnae      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  addressId String  @unique @map("address_id")
  address   Address @relation(fields: [addressId], references: [id])

  ownerId String @unique @map("owner_id")
  owner   Owner  @relation(fields: [ownerId], references: [id])

  companyProfessionals CompanyProfessional[]
  invitations          Invitation[]
  documents            Document[]
  documentTypes        DocumentType[]

  @@map("companies")
}

model Professional {
  id            String   @id @default(uuid())
  name          String
  cpf           String   @unique
  birthDate     DateTime @map("birth_date")
  email         String   @unique
  password      String
  phone         String
  fieldActivity String   @map("field_activity")
  registry      String
  registryUf    String   @map("registry_uf")
  cnae          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  addressId String  @unique
  address   Address @relation(fields: [addressId], references: [id])

  CompanyProfessionals CompanyProfessional[]
  Invitations          Invitation[]

  @@map("professionals")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model CompanyProfessional {
  id             String   @id @default(uuid())
  role           Role     @default(MEMBER)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  companyId      String   @map("company_id")
  professionalId String   @map("professional_id")

  permissions  Permission[]
  company      Company      @relation(fields: [companyId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])

  @@map("company_professionals")
}

model Permission {
  id                    String         @id @default(uuid())
  type                  PermissionType
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  companyProfessionalId String         @map("company_professional_id")

  companyProfessional CompanyProfessional @relation(fields: [companyProfessionalId], references: [id])

  @@map("permissions")
}

model Invitation {
  id             String           @id @default(uuid())
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  companyId      String           @map("company_id")
  professionalId String           @map("professional_id")

  company      Company          @relation(fields: [companyId], references: [id])
  professional Professional     @relation(fields: [professionalId], references: [id])
  permissions  PermissionType[]

  @@map("invitations")
}

model Document {
  id             String   @id @default(uuid())
  name           String
  url            String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  companyId      String   @map("company_id")
  documentTypeId String   @map("document_type_id")
  indexationId   String   @unique @map("indexation_id")

  company      Company      @relation(fields: [companyId], references: [id])
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])
  indexation   Indexation?  @relation(fields: [indexationId], references: [id])

  @@map("documents")
}

model DocumentType {
  id        String @id @default(uuid())
  name      String
  metadata  Json
  companyId String @map("company_id")

  company     Company      @relation(fields: [companyId], references: [id])
  documents   Document[]
  Indexations Indexation[]

  @@map("document_types")
}

model Indexation {
  id             String @id @default(uuid())
  values         Json   @map("metadata_values")
  documentTypeId String @map("document_type_id")

  documentType DocumentType @relation(fields: [documentTypeId], references: [id])
  Document     Document?

  @@map("indexations")
}
