generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  PROFESSIONAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner        Owner?        @relation("UserOwner")
  professional Professional? @relation("UserProfessional")
  actionLogs   ActionLog[]

  @@map("users")
}

model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  uf           String
  city         String
  street       String
  number       String
  neighborhood String
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      Company?
  professional Professional?

  @@map("addresses")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  tradeName String   @map("trade_name")
  cnpj      String   @unique
  cnae      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String  @unique @map("address_id")

  owner Owner? @relation

  documents     Document[]
  documentTypes DocumentType[]
  professionals ProfessionalCompany[]
  actionLogs    ActionLog[]

  @@map("companies")
}

model Owner {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String   @unique @map("company_id")

  user   User   @relation("UserOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("owners")
}

model Professional {
  id            String   @id @default(uuid())
  name          String
  cpf           String   @unique
  birthDate     DateTime @map("birth_date")
  phone         String
  fieldActivity String   @map("field_activity")
  registry      String
  registryUf    String   @map("registry_uf")
  cnae          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String  @unique

  user   User   @relation("UserProfessional", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  companies ProfessionalCompany[]

  @@map("professionals")
}

model DocumentType {
  id             String   @id @default(uuid())
  name           String
  validityPeriod Int      @map("validity_period")
  isActive       Boolean  @default(true) @map("is_active")
  metadata       Json
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  documents  Document[]
  actionLogs ActionLog[]

  @@unique([name, companyId])
  @@map("document_types")
}

model Document {
  id        String   @id @default(uuid())
  name      String
  duedate   DateTime
  url       String
  version   Int
  isLatest  Boolean  @default(false) @map("is_latest")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  documentType   DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  documentTypeId String       @map("document_type_id")

  indexation           Indexation?
  actionLog            ActionLog[]
  documentNotification DocumentNotification?

  @@unique([documentTypeId, version])
  @@map("documents")
}

model Indexation {
  id        String   @id @default(uuid())
  values    Json     @map("metadata_values")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String   @unique @map("document_id")

  @@map("indexations")
}

model ProfessionalCompany {
  id          String   @id @default(uuid())
  permissions Json // Ex.: { "document.create": true, "document-type.delete": false }
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String       @map("professional_id")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  @@unique([professionalId, companyId])
  @@map("professional_companies")
}

model ActionLog {
  id        String   @id @default(uuid())
  action    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")

  documentType   DocumentType? @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  documentTypeId String?       @map("company_type_id")

  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String?   @map("document_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("action_logs")
}

model DocumentNotification {
  id          String   @id @default(uuid())
  scheduledAt DateTime @map("scheduled_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String   @unique @map("document_id")

  @@map("document_notifications")
}
