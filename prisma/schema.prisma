generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  uf           String
  city         String
  street       String
  number       String
  neighborhood String
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      Company?
  professional Professional?

  @@map("addresses")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  tradeName String   @map("trade_name")
  cnpj      String   @unique
  cnae      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  addressId String  @unique @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  owner         Owner?                @relation
  documents     Document[]
  documentTypes DocumentType[]
  professionals ProfessionalCompany[]
  invitations   Invitation[]
  actionLogs    ActionLog[]

  @@map("companies")
}

model Owner {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  phone     String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  companyId String   @unique @map("company_id")

  company   Company?    @relation(fields: [companyId], references: [id])
  ActionLog ActionLog[]

  @@map("owners")
}

model Professional {
  id            String   @id @default(uuid())
  name          String
  cpf           String   @unique
  birthDate     DateTime @map("birth_date")
  email         String   @unique
  password      String
  phone         String
  fieldActivity String   @map("field_activity")
  registry      String
  registryUf    String   @map("registry_uf")
  cnae          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  addressId     String   @unique

  address     Address               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  companies   ProfessionalCompany[]
  invitations Invitation[]
  actionLogs  ActionLog[]

  @@map("professionals")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model DocumentType {
  id        String   @id @default(uuid())
  name      String   @unique
  metadata  Json
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  companyId String   @map("company_id")

  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents  Document[]
  actionLogs ActionLog[]

  @@map("document_types")
}

model Document {
  id             String   @id @default(uuid())
  name           String
  url            String
  version        Int
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  companyId      String   @map("company_id")
  documentTypeId String   @map("document_type_id")

  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  indexation   Indexation?
  actionLog    ActionLog[]

  @@unique([documentTypeId, version])
  @@map("documents")
}

model Indexation {
  id         String   @id @default(uuid())
  values     Json     @map("metadata_values")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  documentId String   @unique @map("document_id")

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("indexations")
}

model ProfessionalCompany {
  id             String   @id @default(uuid())
  permissions    Json // Ex.: { "document.create": true, "document-type.delete": false }
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  professionalId String   @map("professional_id")
  companyId      String   @map("company_id")

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([professionalId, companyId])
  @@map("professional_companies")
}

model Invitation {
  id             String           @id @default(uuid())
  professionalId String           @map("professional_id")
  companyId      String           @map("company_id")
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([professionalId, companyId])
  @@map("invitations")
}

model ActionLog {
  id             String   @id @default(uuid())
  action         String
  companyId      String   @map("company_id")
  ownerId        String?  @map("owner_id")
  professionalId String?  @map("professional_id")
  documentId     String?  @map("document_id")
  documentTypeId String?  @map("company_type_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  company      Company       @relation(fields: [companyId], references: [id])
  owner        Owner?        @relation(fields: [ownerId], references: [id])
  professional Professional? @relation(fields: [professionalId], references: [id])
  documentType DocumentType? @relation(fields: [documentTypeId], references: [id])
  document     Document?     @relation(fields: [documentId], references: [id])

  @@map("action_logs")
}
